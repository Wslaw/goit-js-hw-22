{"mappings":"AAkVA,IAAMA,KAAOC,SAASC,cAAc,gBAIpC,SAASC,aAAaC,GACpBA,EAAMC,iBAGL,IAA4CC,EAAAF,EAAMG,cAAcC,SAAzDC,EAAqCH,EAArCG,SAAUC,EAA2BJ,EAA3BI,MAAOC,EAAoBL,EAApBK,MAAOC,EAAaN,EAAbM,SAE1BC,EAAW,CACfC,KAAML,EAASM,MACfL,MAAOA,EAAMK,MACbJ,MAAOA,EAAMI,MACbC,QAASJ,EAASG,OAKRE,QAAJC,IAAIL,GACZM,sBAAsBN,GACnBO,MAAK,SAAAC,GACJJ,QAAQC,IAAIG,GACZC,MAAM,a,IAEPC,OAAM,SAAAC,G,OAAOP,QAAQQ,MAAMD,E,IAC3BE,SAAQ,W,OAAM1B,KAAK2B,O,IAGxB,SAASR,sBAAsBE,GAG7B,OAAOO,MAAMC,KAAK,GAAUC,OAFhB,4BAEa,KAAYA,OADpB,YACuBT,GAAMD,MAAK,SAAAW,G,OAAOA,EAAJV,I,IA9BxDrB,KAAKgC,iBAAiB,SAAU7B","sources":["src/script.js"],"sourcesContent":["// ******************** CRUD ******************** \\\\\n\n// Create - POST - створює новий ресурс на сервері, не є ідемпотентним\n// Read   - GET - запит, який отримує дані з ресурсу, є ідемпотентним\n// Update -\n/*\n    - PUT - запит, який повністю оновлює дані на сервері, тобто, якщо на сервері у вас був обʼєкт типу { name: \"Oleg\", age: 28}, ви послали PUT запит з тілом {name: \"Vika\"} -> в результаті цієї дії на сервері буде обʼєкт {name: \"Vika\"}, є ідемпотентним\n    - PATCH - запит, який частково оновлює дані на сервері, тобто, якщо на сервері у вас був обʼєкт типу { name: \"Oleg\", age: 28}, ви послали PATCH запит з тілом {name: \"Vika\"} -> в результаті цієї дії на сервері буде обʼєкт {name: \"Vika\", age: 28}, не є ідемпотентним\n\n */\n// DELETE - DELETE - запит, що повністю видаляє ресурс на сервері, [{1}, {2}, {3}] -> DELETE 2 -> [{1}, {3}] є ідемпотентним\n\n// ідемпотентний метод це метод, який не буде змінювати стан серверу при однакових повторних запитах\n/*\nDB: [{1}, {2}, {3}]\n\nGET 2 -> response {2} | DB: [{1}, {2}, {3}]\nGET 2 -> response {2} | DB: [{1}, {2}, {3}]\nGET 2 -> response {2} | DB: [{1}, {2}, {3}]\nGET 2 -> response {2} | DB: [{1}, {2}, {3}]\n\nDELETE 2 -> responce 200 {2} | DB: [{1}, {3}]\nDELETE 2 -> responce 404 | DB: [{1}, {3}]\nDELETE 2 -> responce 404 | DB: [{1}, {3}]\nDELETE 2 -> responce 404 | DB: [{1}, {3}]\n\n=============================================\nDB: [{1}, {2}, {3}]\n\nPOST {4} -> responce 201 | DB: [{1}, {2}, {3}, {4}]\nPOST {4} -> responce 201 | DB: [{1}, {2}, {3}, {4}, {4}]\nPOST {4} -> responce 201 | DB: [{1}, {2}, {3}, {4}, {4}, {4}]\nPOST {4} -> responce 201 | DB: [{1}, {2}, {3}, {4}, {4}, {4}, {4}]\n\n\n*/\n\n// API https://jsonplaceholder.typicode.com/posts\n\n// const URL = \"https://jsonplaceholder.typicode.com/posts\";\n\n// // ******************** POST - CREATE ******************** \\\\\n\n// const newPost = {\n//   userId: 101,\n//   title: \"My new Post\",\n//   body: \"lsdkjfkdlsjfsdlkfj lskdjflskdjfsdlkfj lskdjfldksfj\",\n// };\n\n// // fetch(URL, {\n// //   method: \"POST\",\n// //   body: JSON.stringify(newPost),\n// //   headers: {\n// //     \"Content-type\": \"application/json\",\n// //   },\n// // })\n// //   .then((res) => {\n// //     if (!res.ok) {\n// //       throw new Error(res.statusText);\n// //     }\n\n// //     return res.json();\n// //   })\n// //   .then((data) => console.log(data))\n// //   .catch((err) => console.error(err));\n\n// axios\n//   .post(URL, newPost)\n//   .then((data) => console.log(data))\n//   .catch((err) => console.error(err));\n\n// // ******************** GET - READ ******************** \\\\\n\n// // fetch(URL)\n// //   .then((res) => {\n// //     if (!res.ok) {\n// //       throw new Error(res.statusText);\n// //     }\n\n// //     return res.json();\n// //   })\n// //   .then((data) => console.log(data))\n// //   .catch((err) => console.error(err));\n\n// axios\n//   .get(URL)\n//   .then((data) => console.log(data))\n//   .catch((err) => console.error(err));\n\n// // ******************** PATCH - UPDATE ******************** \\\\\n\n// const updatedPost1 = {\n//   userId: 101,\n//   title: \"My new Post updated 1\",\n// };\n\n// // fetch(`${URL}/${1}`, {\n// //   method: \"PATCH\",\n// //   body: JSON.stringify(updatedPost1),\n// //   headers: {\n// //     \"Content-type\": \"application/json\",\n// //   },\n// // })\n// //   .then((res) => {\n// //     if (!res.ok) {\n// //       throw new Error(res.statusText);\n// //     }\n\n// //     return res.json();\n// //   })\n// //   .then((data) => console.log(data))\n// //   .catch((err) => console.error(err));\n\n// axios\n//   .patch(`${URL}/${1}`, updatedPost1)\n//   .then((data) => console.log(data))\n//   .catch((err) => console.error(err));\n\n// // ******************** PUT - UPDATE ******************** \\\\\n\n// const updatedPost2 = {\n//   userId: 102,\n//   title: \"My new Post updated PUT\",\n// };\n\n// // fetch(`${URL}/${1}`, {\n// //   method: \"PUT\",\n// //   body: JSON.stringify(updatedPost2),\n// //   headers: {\n// //     \"Content-type\": \"application/json\",\n// //   },\n// // })\n// //   .then((res) => {\n// //     if (!res.ok) {\n// //       throw new Error(res.statusText);\n// //     }\n\n// //     return res.json();\n// //   })\n// //   .then((data) => console.log(data))\n// //   .catch((err) => console.error(err));\n\n// axios\n//   .put(`${URL}/${1}`, updatedPost2)\n//   .then((data) => console.log(data))\n//   .catch((err) => console.error(err));\n\n// // ******************** DELETE ******************** \\\\\n\n// // fetch(`${URL}/${2}`, {\n// //   method: \"DELETE\",\n// // })\n// //   .then((res) => {\n// //     if (!res.ok) {\n// //       throw new Error(res.statusText);\n// //     }\n\n// //     return res.json();\n// //   })\n// //   .then((data) => console.log(data))\n// //   .catch((err) => console.error(err));\n\n// axios\n//   .delete(`${URL}/${2}`)\n//   .then((data) => console.log(data))\n//   .catch((err) => console.error(err));\n\n// ******************** Практика ******************** \\\\\n\n// Завдання - 1.\n// Потрібно створи форму \"Зв'яжіться зі мною\" в якій користувач має можливість залишити заявку для того, щоб з ним зв'язались та відповіли на його питання\n// Форма має складатись з таких елементів:\n// 1 - Поле для імені.\n// 2 - Поле для номера телефону.\n// 3 - Поле для адреси електронної пошти.\n// 4 - Поле для питання.\n\n// Форма має відправляти дані на бекенд та зберігати їх в базі даних.\n\n// Завдання - 2.\n// Реалізуй сторінку для власника бізнесу - після того, як потрапляємо на сторінку потрібно отримати з бази даних всі заявки, які були залишені користувачами\n\n//  http://127.0.0.1:3000/api\n// *****************************************************************************************\n// const form = document.querySelector(\".js-question\");\n\n// form.addEventListener(\"submit\", handleSubmit);\n\n// function handleSubmit(event) {\n//   event.preventDefault();\n\n//   const { userName, phone, email, question } = event.currentTarget.elements;\n\n//   const userData = {\n//     name: userName.value,\n//     phone: phone.value,\n//     email: email.value,\n//     comment: question.value,\n//   };\n\n//   console.log(userData);\n//   createQuestionService(userData)\n//     .then((data) => {\n//       console.log(data);\n//       alert(\"Thank you!\");\n//     })\n//     .catch((err) => console.error(err))\n//     .finally(() => form.reset());\n// }\n\n// function createQuestionService(data) {\n//   const URL = \"http://127.0.0.1:3000/api\";\n//   const ENDPOINT = \"question\";\n//   return axios.post(`${URL}/${ENDPOINT}`, data).then(({ data }) => data);\n// }\n// **************************************************************************************\n\n// const URL = 'https://jsonplaceholder.typicode.com/posts';\n\n// const newPost = {\n//   userId: 101,\n//   title: 'My new Post',\n//   body: 'lsdkjfkdlsjfsdlkfj lskdjflskdjfsdlkfj lskdjfldksfj',\n// };\n\n// const updatedPost1 = {\n//   userId: 101,\n//   title: 'My new Post updated',\n// };\n\n// const updatedPost2 = {\n//   userId: 101,\n//   title: 'My new Post updated',\n//   text: 'fffffffffffffff',\n// };\n\n// **************************************************************\n//              POST - Write\n// **********************************************************\n// fetch(URL, {\n//   method: 'POST',\n//   body: JSON.stringify(newPost),\n//   headers: {\n//     \"Content-Type\": \"application/json\",\n//   }\n// });\n\n// axios.post(URL, newPost);\n\n// **********************************************************\n//             GET - Read\n// **********************************************************\n// fetch(URL).then(resp => {\n//   if (!resp.ok) {\n//     throw new Error(resp.statusText)\n//   }\n//   return resp.json()\n// }).then((data => console.log(data)))\n//   .then((err => console.log(err)));\n\n// -------------------------------------------\n\n// axios.get(URL)\n//    .then((data => console.log(data)))\n//   .then((err => console.log(err)));;\n\n// *******************************************\n//           PATCH -Update\n// ******************************************\n\n// fetch(`${URL}/${1}`, {\n//   method: 'PATCH',\n//   body: JSON.stringify(updatedPost1),\n//   headers: {\n//     'Content-Type': 'application/json',\n//   },\n// })\n//   .then(resp => {\n//     if (!resp.ok) {\n//       throw new Error(resp.statusText);\n//     }\n//     return resp.json();\n//   })\n//   .then(data => console.log(data))\n//   .catch(err => console.error(err));\n\n// ------------------------------------\n// axios\n//   .patch(`${URL}/${1}`, updatedPost1)\n//   .then(data => console.log(data))\n//   .catch(err => console.log(err));\n\n// *******************************************\n//           PUT -Update\n// ******************************************\n// fetch(`${URL}/${1}`, {\n//   method: 'PUT',\n//   body: JSON.stringify(updatedPost2),\n//   headers: {\n//     'Content-Type': 'application/json',\n//   },\n// })\n//   .then(resp => {\n//     if (!resp.ok) {\n//       throw new Error(resp.statusText);\n//     }\n//     return resp.json();\n//   })\n//   .then(data => console.log(data))\n//   .catch(err => console.error(err));\n\n// ------------------------------------\n// axios\n//   .put(`${URL}/${1}`, updatedPost2)\n//   .then(data => console.log(data))\n//   .catch(err => console.log(err));\n\n// ***********************************************\n//           Delete\n// *********************************************\n// fetch(`${URL}/${1}`, {\n//   method: 'DELETE',\n//    })\n//   .then(resp => {\n//     if (!resp.ok) {\n//       throw new Error(resp.statusText);\n//     }\n//     return resp.json();\n//   })\n//   .then(data => console.log(data))\n//   .catch(err => console.error(err));\n\n// --------------------------------------\n// axios.delete(`${URL}/${1}`);\n// ********************************************************\n// ******************************************************\n//                   ПРАКТИКА\n// ***************************************************\nconst form = document.querySelector('.js-question');\n\nform.addEventListener('submit', handleSubmit);\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n  // Далі збираємо дані: (витягуємо елементи форми за допомогой elements:\n  // name = \"userName\", name=\"phone\", name=\"email\", name=\"question\" iз HTML)\n  const { userName, phone, email, question } = event.currentTarget.elements;\n\n  const userData = {\n    name: userName.value,\n    phone: phone.value,\n    email: email.value,\n    comment: question.value,\n  };\n  //            Зібрали дані\n  // ----------------------------------------\n  //            Послали запит\n  console.log(userData);\n  createQuestionService(userData)\n    .then(data => {\n      console.log(data);\n      alert('Thank you!');\n    })\n    .catch(err => console.error(err))\n    .finally(() => form.reset());\n}\n\nfunction createQuestionService(data) {\n  const URL = 'http://127.0.0.1:3000/api';\n  const ENDPOINT = 'question';\n  return axios.post(`${URL}/${ENDPOINT}`, data).then(({ data }) => data);\n}\n// *******************************\n//  Отримання данних у файлі question.js\n// -------------------------------\n\n"],"names":["form","document","querySelector","handleSubmit","event","preventDefault","_elements","currentTarget","elements","userName","phone","email","question","userData","name","value","comment","console","log","createQuestionService","then","data","alert","catch","err","error","finally","reset","axios","post","concat","param","addEventListener"],"version":3,"file":"index.c956ba71.js.map"}